// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum ServiceType {
  BOARDING
  DAYCARE
  WALK_30
  WALK_60
  DROPIN_30
  DROPIN_45
}

enum BookingStatus {
  PENDING
  HELD
  CONFIRMED
  CANCELED
  COMPLETED
}

enum MessageRole {
  USER
  ASSISTANT
  TOOL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id       String   @id @default(cuid())
  role     UserRole @default(CLIENT)
  name     String?
  email    String   @unique
  phone    String?
  address  String?
  emailVerified DateTime?
  image    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  pets          Pet[]
  bookings      Booking[]
  conversations Conversation[]

  @@index([email])
  @@index([role])
}

model Pet {
  id              String    @id @default(cuid())
  ownerId         String
  name            String
  breed           String?
  weightKg        Float?
  ageYears        Int?
  vaccinationsUrl String[]
  notes           String?
  aggressive      Boolean   @default(false)
  specialCare     Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@index([ownerId])
  @@unique([ownerId, name])
}

model Service {
  id             String      @id @default(cuid())
  type           ServiceType @unique
  name           String
  description    String?
  basePriceCents Int
  capacity       Int         @default(1)
  bufferMins     Int         @default(30)
  durationMins   Int?        // For fixed-duration services like walks
  enabled        Boolean     @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@index([type])
  @@index([enabled])
}

model AvailabilityRule {
  id        String @id @default(cuid())
  dayOfWeek Int    // 0-6 (Sunday-Saturday)
  startTime String // HH:mm format
  endTime   String // HH:mm format
  enabled   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayOfWeek, enabled])
}

model Blackout {
  id            String   @id @default(cuid())
  startDateTime DateTime
  endDateTime   DateTime
  reason        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startDateTime, endDateTime])
}

model Booking {
  id            String        @id @default(cuid())
  clientId      String
  petId         String
  serviceId     String
  startDateTime DateTime
  endDateTime   DateTime
  status        BookingStatus @default(PENDING)
  priceCents    Int
  notes         String?
  holdExpiresAt DateTime?     // For HELD bookings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client   User      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  pet      Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([startDateTime, endDateTime, status])
  @@index([clientId])
  @@index([serviceId])
  @@index([status])
  @@index([holdExpiresAt])
}

model BusinessSettings {
  id                String @id @default("singleton")
  timezone          String @default("America/Toronto")
  defaultBufferMins Int    @default(30)
  depositPct        Int    @default(50) // Percentage of total price
  taxRate           Float  @default(0.13) // HST for Ontario
  address           String?
  contactEmail      String?
  contactPhone      String?
  businessName      String @default("PawBooker")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id     String  @id @default(cuid())
  userId String? // Nullable for guest conversations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([createdAt])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String      @db.Text
  toolName       String?
  toolPayload    Json?

  createdAt DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

model Payment {
  id                     String        @id @default(cuid())
  bookingId              String
  stripePaymentIntentId  String        @unique
  amountCents            Int
  status                 PaymentStatus @default(PENDING)
  metadata               Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([status])
}
